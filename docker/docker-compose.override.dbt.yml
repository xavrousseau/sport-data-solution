# ====================================================================================
# FICHIER   : docker/docker-compose.override.dbt.yml
# OBJET     : Service DBT (mod√©lisation SQL) ‚Äî ex√©cutions interactives & docs
# CONTEXTE  : S‚Äôappuie sur PostgreSQL interne ("sport-postgres") et variables du .env
# ====================================================================================

services:

  # -----------------------------------------------------------------------------
  # üß± DBT CLI ‚Äî √©crire/tester des mod√®les SQL, g√©n√©rer la doc, lancer des tests
  # -----------------------------------------------------------------------------
  sport-dbt:
    image: ghcr.io/dbt-labs/dbt-postgres:1.7.13   # version explicite, stable
    container_name: sport-dbt
    working_dir: /usr/app                          # racine du projet dbt dans le conteneur

    # On monte le projet et le profile au bon endroit (coh√©rent avec DBT_PROFILES_DIR)
    volumes:
      - ./dbt:/usr/app
      - ./dbt/profiles.yml:/usr/app/profiles.yml:ro

    environment:
      # DBT lira ce profiles.yml (√©vite /root/.dbt et aligne avec ton .env)
      DBT_PROFILES_DIR: /usr/app                  # ‚Üê cf. .env
      # Connexion Postgres (inject√©e depuis .env pour rester DRY)
      PGHOST: ${PGHOST}
      PGPORT: ${PGPORT}
      PGUSER: ${PGUSER}
      PGPASSWORD: ${PGPASSWORD}
      PGDATABASE: ${PGDATABASE}
      DBT_TARGET: ${DBT_TARGET}
      TZ: Europe/Paris

    # Service persistant pour pouvoir docker exec / docker compose run selon tes usages
    entrypoint: ["sleep", "infinity"]

    healthcheck:
      # V√©rifie simplement que la CLI dbt r√©pond (la connexion DB n‚Äôest pas requise ici)
      test: ["CMD-SHELL", "dbt --version || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

    depends_on:
      # Attend Postgres "healthy" pour √©viter les messages d‚Äôerreur au premier run
      sport-postgres:
        condition: service_healthy

    restart: unless-stopped
    networks:
      - sport-network   # m√™me r√©seau que le reste de la stack

# R√©utilise le r√©seau commun d√©j√† d√©fini dans le compose principal
networks:
  sport-network:
    driver: bridge
