# ====================================================================================
# FICHIER   : docker/docker-compose.override.dbt.yml
# OBJET     : Déploiement de DBT (modélisation et transformation de données SQL)
# CONTEXTE  : Utilise l’image officielle dbt-postgres, reliée à PostgreSQL local
# ====================================================================================

services:

  # -------------------------------------------------------------------------------
  # 🧱 Service DBT — Transformation et modélisation SQL orientée analytique
  # -------------------------------------------------------------------------------
  sport-dbt:
    image: ghcr.io/dbt-labs/dbt-postgres:1.7.13
    container_name: sport-dbt

    working_dir: /usr/app  # 📁 Répertoire de travail DBT à l’intérieur du conteneur

    volumes:
      # 📦 Montage du projet DBT local
      - ./dbt:/usr/app

      # ⚙️ Fichier profiles.yml avec les connexions DBT (standard ~/.dbt/profiles.yml)
      - ./dbt/profiles.yml:/root/.dbt/profiles.yml

    environment:
      # 📂 Répertoire du profile DBT
      DBT_PROFILES_DIR: /root/.dbt

      # 🔑 Connexion à PostgreSQL (injectée depuis .env)
      PGHOST: ${PGHOST}
      PGPORT: ${PGPORT}
      PGUSER: ${PGUSER}
      PGPASSWORD: ${PGPASSWORD}
      PGDATABASE: ${PGDATABASE}

      # 🎯 Cible active du projet (ex : dev, prod…)
      DBT_TARGET: ${DBT_TARGET}

    # ✅ Garde le conteneur actif sans générer d’erreur liée à une commande shell inexistante
    entrypoint: ["sleep", "infinity"]

    healthcheck:
      # ❤️ Vérifie que la CLI DBT fonctionne correctement
      test: ["CMD-SHELL", "dbt --version || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

    depends_on:
      sport-postgres:
        condition: service_healthy  # ✅ Attend que PostgreSQL soit prêt

    restart: unless-stopped  # 🔁 Redémarre sauf en cas d’arrêt manuel

    networks:
      - sport-network  # 🌐 Réseau partagé avec les autres services

# -------------------------------------------------------------------------------
# 🌐 Réseau Docker partagé pour l’ensemble de la stack
# -------------------------------------------------------------------------------
networks:
  sport-network:
    driver: bridge
