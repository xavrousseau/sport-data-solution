# ====================================================================================
# FICHIER : docker/docker-compose.override.airflow.yml
# OBJET   : D√©ploiement modulaire d‚ÄôApache Airflow avec CeleryExecutor
# CONTEXTE : Stack distribu√©e ‚Äî Redis (broker), PostgreSQL (backend), DAGs locaux
# ====================================================================================

# --------------------------------------------------------------------------
# üîÅ Bloc commun √† tous les services Airflow (r√©utilis√© avec <<)
# --------------------------------------------------------------------------
x-airflow-common: &airflow-common
  build: ./airflow  # üì¶ Image construite localement depuis le Dockerfile dans ./airflow

  environment:
    # üß† Mode d‚Äôex√©cution d‚ÄôAirflow
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor

    # üóÑ Connexion au backend PostgreSQL
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}

    # üí¨ Configuration de Celery (broker Redis + backend PostgreSQL)
    AIRFLOW__CELERY__BROKER_URL: redis://${REDIS_HOST}:${REDIS_PORT}/0
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}

    # üîê S√©curit√©
    AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW__CORE__FERNET_KEY}
    AIRFLOW__WEBSERVER__SECRET_KEY: ${AIRFLOW__WEBSERVER__SECRET_KEY}

    # ‚öôÔ∏è Options de d√©marrage
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: "true"
    AIRFLOW__CORE__LOAD_EXAMPLES: "false"

    # üîî Notifications NTFY (inject√©es dans tous les services Airflow)
    NTFY_URL: http://sport-ntfy:80
    NTFY_TOPIC: sportdata_activites

  volumes:
    # üìÇ Dossiers locaux mont√©s dans les conteneurs
    - ./airflow/dags:/opt/airflow/dags
    - ./airflow/logs:/opt/airflow/logs
    - ./airflow/plugins:/opt/airflow/plugins
    - ./airflow/scripts:/opt/airflow/scripts
    - ./airflow/data:/opt/airflow/data
    - ./airflow/tests:/opt/airflow/tests
    - ./.env:/opt/airflow/.env:ro

  networks:
    - sport-network

  depends_on:
    sport-postgres:
      condition: service_healthy
    sport-redis:
      condition: service_healthy

# --------------------------------------------------------------------------
# 1Ô∏è‚É£ Webserver ‚Äî Interface Web Airflow (http://localhost:8092)
# --------------------------------------------------------------------------
services:
  sport-airflow-webserver:
    <<: *airflow-common
    container_name: sport-airflow-webserver
    command: webserver
    ports:
      - "8092:8080"

# --------------------------------------------------------------------------
# 2Ô∏è‚É£ Scheduler ‚Äî Planification des DAGs
# --------------------------------------------------------------------------
  sport-airflow-scheduler:
    <<: *airflow-common
    container_name: sport-airflow-scheduler
    command: scheduler

# --------------------------------------------------------------------------
# 3Ô∏è‚É£ Worker ‚Äî Ex√©cution des t√¢ches via Celery
# --------------------------------------------------------------------------
  sport-airflow-worker:
    <<: *airflow-common
    container_name: sport-airflow-worker
    command: celery worker

# --------------------------------------------------------------------------
# 4Ô∏è‚É£ Flower ‚Äî UI de monitoring des workers (http://localhost:5566)
# --------------------------------------------------------------------------
  sport-flower:
    image: sport-airflow  # ‚úÖ On utilise l'image personnalis√©e qui contient Flower
    container_name: sport-flower
    entrypoint: ["celery", "--app", "airflow.executors.celery_executor.app", "flower"]
    ports:
      - "5566:5555"
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__CELERY__BROKER_URL: redis://${REDIS_HOST}:${REDIS_PORT}/0
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}
    depends_on:
      sport-redis:
        condition: service_healthy
      sport-airflow-worker:
        condition: service_started
    networks:
      - sport-network
