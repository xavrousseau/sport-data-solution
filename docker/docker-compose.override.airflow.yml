# ====================================================================================
# D√©ploiement modulaire d‚ÄôApache Airflow avec CeleryExecutor
# ====================================================================================

# ------------------------------------------------------------------------------
# üîÅ Bloc commun (pas de build ici)
# ------------------------------------------------------------------------------
x-airflow-common: &airflow-common
  image: sport-airflow:latest
  environment:
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}
    AIRFLOW__CELERY__BROKER_URL: redis://${REDIS_HOST}:${REDIS_PORT}/0
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}
    AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW__CORE__FERNET_KEY}
    AIRFLOW__WEBSERVER__SECRET_KEY: ${AIRFLOW__WEBSERVER__SECRET_KEY}
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: "true"
    AIRFLOW__CORE__LOAD_EXAMPLES: "false"
    NTFY_URL: http://sport-ntfy:80
    NTFY_TOPIC: sportdata_activites
    LANCER_STREAMING: ${LANCER_STREAMING}
  volumes:
    - ./airflow/dags:/opt/airflow/dags
    - ./airflow/logs:/opt/airflow/logs
    - ./airflow/scripts:/opt/airflow/scripts
    - ./airflow/data:/opt/airflow/data
    - ./airflow/tests:/opt/airflow/tests
    - ./airflow/plugins:/opt/airflow/plugins
    - ./.env:/opt/airflow/.env:ro
  networks: [sport-network]
  depends_on:
    sport-postgres: { condition: service_healthy }
    sport-redis:    { condition: service_healthy }

services:

  # --------------------------------------------------------------------------
  # 1Ô∏è‚É£ Webserver ‚Äî SEUL √† builder l'image Airflow locale
  # --------------------------------------------------------------------------
  sport-airflow-webserver:
    <<: *airflow-common
    build: ./airflow            
    image: sport-airflow:latest   
    container_name: sport-airflow-webserver
    command: webserver
    ports:
      - "8092:8080"

  # --------------------------------------------------------------------------
  # 2Ô∏è‚É£ Scheduler ‚Äî r√©utilise l'image locale d√©j√† build√©e
  # --------------------------------------------------------------------------
  sport-airflow-scheduler:
    <<: *airflow-common
    container_name: sport-airflow-scheduler
    command: scheduler

  # --------------------------------------------------------------------------
  # 3Ô∏è‚É£ Worker ‚Äî r√©utilise l'image locale d√©j√† build√©e
  # --------------------------------------------------------------------------
  sport-airflow-worker:
    <<: *airflow-common
    container_name: sport-airflow-worker
    command: celery worker

  # --------------------------------------------------------------------------
  # 4Ô∏è‚É£ Flower ‚Äî r√©utilise l'image locale d√©j√† build√©e
  # --------------------------------------------------------------------------
  sport-flower:
    image: sport-airflow:latest
    container_name: sport-flower
    entrypoint: ["celery", "--app", "airflow.executors.celery_executor.app", "flower"]
    ports:
      - "5566:5555"
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__CELERY__BROKER_URL: redis://${REDIS_HOST}:${REDIS_PORT}/0
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}
    depends_on:
      sport-redis:           { condition: service_healthy }
      sport-airflow-worker:  { condition: service_started }
    networks: [sport-network]
