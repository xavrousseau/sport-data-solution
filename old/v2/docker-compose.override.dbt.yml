# ==========================================================================================
# Fichier    : docker-compose.override.dbt.yml (full .env)
# Objectif   : Ajouter dbt (Data Build Tool) pour modéliser et exécuter des transformations SQL
#              directement sur PostgreSQL (modèle ELT, data warehouse moderne)
# Auteur     : Xavier Rousseau | Juin 2025
#
# Avantages de cette intégration :
#   - dbt centralise les modèles SQL, macros, tests de qualité, documentation…
#   - Exécution containerisée : reproductible sur tout environnement
#   - Connexion PostgreSQL via variables d'environnement sécurisées (.env)
# ==========================================================================================



services:

  # ----------------------------------------------------------------------------------------
  # sport-dbt — Service dbt principal pour la stack
  #   - Basé sur l'image officielle dbt (support natif PostgreSQL)
  #   - Monte le dossier local ./dbt dans le conteneur pour édition à chaud (projets, models, macros…)
  #   - Peut lancer dbt CLI à la main (shell) ou en script dans CI/CD
  #   - Requiert PostgreSQL (service sport-postgres déjà lancé)
  # ----------------------------------------------------------------------------------------
  sport-dbt:
    image: ghcr.io/dbt-labs/dbt-postgres:1.7.9   # Version stable (change si besoin)
    container_name: sport-dbt

    # ---------------------
    # Montage du projet dbt
    # ---------------------
    # ./dbt : dossier local avec :
    #   - models/          (modèles SQL dbt)
    #   - macros/          (fonctions personnalisées Jinja/dbt)
    #   - profiles.yml     (configurations de connexion)
    #   - seeds/           (données de test/seed)
    #   - tests/           (tests dbt)
    #   - target/          (sorties dbt)
    # ---------------------
    volumes:
      - ./dbt:/usr/app

    # ---------------------
    # Répertoire de travail du conteneur
    # ---------------------
    working_dir: /usr/app

    # ---------------------
    # Entrypoint par défaut : ne lance rien, permet de se connecter en bash (docker exec)
    # Pour lancer dbt (ex : docker compose exec sport-dbt dbt run/test/docs)
    # ---------------------
    entrypoint: ["tail", "-f", "/dev/null"]

    # ---------------------
    # Variables d'environnement :
    # - DBT_PROFILES_DIR : où chercher profiles.yml (bonne pratique = projet)
    # - DBT_TARGET : cible dbt à utiliser (prod, dev, etc. — voir profiles.yml)
    # - PGHOST, PGPORT, etc. : variables PG (pour exécution CLI, tests, debugging)
    # ---------------------
    environment:
      DBT_PROFILES_DIR: /usr/app/profiles          # (optionnel mais recommandé)
      DBT_TARGET: ${DBT_TARGET}
      PGHOST: ${POSTGRES_HOST}
      PGPORT: ${POSTGRES_PORT}
      PGUSER: ${POSTGRES_USER}
      PGPASSWORD: ${POSTGRES_PASSWORD}
      PGDATABASE: ${POSTGRES_DB}

    # ---------------------
    # Démarre après PostgreSQL (sécurité de connexion au démarrage)
    # ---------------------
    depends_on:
      - sport-postgres

    # ---------------------
    # Intégration réseau avec la stack (accès PostgreSQL & autres outils)
    # ---------------------
    networks:
      - sportdata_net

# ==========================================================================================
# FIN DE FICHIER — docker-compose.override.dbt.yml
# ==========================================================================================
