# ====================================================================================
# FICHIER   : docker-compose.yml
# OBJET     : Services centraux de la stack Sport Data Solution (ingestion, stockage, traitement)
# AUTEUR    : Xavier Rousseau ‚Äî Juillet 2025
# ====================================================================================

services:

  # ================================================================================
  # 1. PostgreSQL ‚Äî Base de donn√©es relationnelle principale
  #    - Utilis√© par Airflow, Metabase, pgAdmin, DBT et autres
  #    - Contient les donn√©es m√©tiers de la plateforme
  # ================================================================================
  sport-postgres:
    image: postgres:15
    container_name: sport-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}             # Identifiant de connexion
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}     # Mot de passe PostgreSQL
      POSTGRES_DB: ${POSTGRES_DB}                 # Base de donn√©es principale
    ports:
      - "${POSTGRES_PORT}:5432"                   # Port PostgreSQL expos√©
    volumes:
      - postgres_data:/var/lib/postgresql/data    # Volume persistant des donn√©es
    command:
      - "postgres"
      - "-c"
      - "wal_level=logical"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - sport-network

  # ================================================================================
  # 2. MinIO ‚Äî Stockage objet S3-compatible
  #    - Utilis√© pour stocker les fichiers bruts, logs, exports, rapports
  #    - Console web incluse pour navigation
  # ================================================================================
  sport-minio:
    image: minio/minio:latest
    container_name: sport-minio
    command: server /data --console-address ":${MINIO_CONSOLE_PORT}"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    ports:
      - "${MINIO_PORT}:9000"                       # API S3
      - "${MINIO_CONSOLE_PORT}:9001"               # Console web MinIO
    volumes:
      - minio_data:/data                           # Stockage des objets
    restart: unless-stopped
    networks:
      - sport-network

  # ================================================================================
  # 3. Redpanda ‚Äî Broker Kafka-compatible (streaming temps r√©el)
  #    - Utilis√© pour g√©rer les flux temps r√©el (CDC, √©v√©nements)
  # ================================================================================
  sport-redpanda:
    image: docker.redpanda.com/redpandadata/redpanda:latest
    container_name: sport-redpanda
    command: redpanda start --overprovisioned --smp 1 --memory 512M --reserve-memory 0M --node-id 0 --check=false \
      --advertise-kafka-addr sport-redpanda:9092 --kafka-addr 0.0.0.0:9092
    ports:
      - "${REDPANDA_BROKER_PORT}:9092"
      - "${REDPANDA_ADMIN_PORT}:9644"
    volumes:
      - redpanda_data:/var/lib/redpanda/data
    restart: unless-stopped
    networks:
      - sport-network

  # --------------------------------------------------------------------------------
  # Console Redpanda ‚Äî UI web pour explorer les topics, messages, sch√©mas
  # --------------------------------------------------------------------------------
  sport-redpanda-console:
    image: docker.redpanda.com/redpandadata/console:latest
    container_name: sport-redpanda-console
    restart: always
    environment:
      - KAFKA_BROKERS=sport-redpanda:9092
      - REDPANDA_ADMIN_URL=http://sport-redpanda:9644
    ports:
      - "${REDPANDA_CONSOLE_PORT}:8080"           # Interface console web
    depends_on:
      - sport-redpanda
    networks:
      - sport-network

  # ================================================================================
  # 4. Debezium ‚Äî Change Data Capture (CDC) PostgreSQL vers Redpanda (Kafka)
  #    - Capture les changements en temps r√©el dans PostgreSQL
  #    - Publie les √©v√©nements dans Redpanda
  # ================================================================================
  sport-debezium:
    image: debezium/connect:2.5
    container_name: sport-debezium
    depends_on:
      sport-postgres:
        condition: service_healthy
      sport-redpanda:
        condition: service_started
    environment:
      BOOTSTRAP_SERVERS: ${DEBEZIUM_BOOTSTRAP_SERVERS}
      GROUP_ID: ${DEBEZIUM_GROUP_ID}
      CONFIG_STORAGE_TOPIC: ${DEBEZIUM_CONFIG_STORAGE_TOPIC}
      OFFSET_STORAGE_TOPIC: ${DEBEZIUM_OFFSET_STORAGE_TOPIC}
      STATUS_STORAGE_TOPIC: ${DEBEZIUM_STATUS_STORAGE_TOPIC}
      REST_ADVERTISED_HOST_NAME: ${DEBEZIUM_CONNECT_REST_ADVERTISED_HOST_NAME}
    ports:
      - "${DEBEZIUM_CONNECT_PORT}:8083"
    restart: unless-stopped
    networks:
      - sport-network


  # ================================================================================
  # 5. Spark ‚Äî Traitement de donn√©es (batch, streaming)
  #    - Peut consommer des topics Kafka et √©crire en Delta Lake ou PostgreSQL
  # ================================================================================
  sport-spark:
    build:
      context: .
      dockerfile: spark/Dockerfile  # Dockerfile situ√© dans ./spark/
    image: sport-spark:latest
    container_name: sport-spark
    # Mode standalone master
    environment:
      SPARK_MODE: master
      KAFKA_BOOTSTRAP_SERVERS: sport-redpanda:9092  # Redpanda interne Docker
    ports:
      - "${SPARK_UI_PORT}:4040"    # UI Spark Streaming
      - "${SPARK_CLUSTER_PORT}:7077"  # Optionnel
    volumes:
      - ./spark/jobs:/opt/bitnami/spark/jobs  # Scripts Spark accessibles dans le conteneur
    networks:
      - sport-network
    restart: unless-stopped

  # ================================================================================
  # 6. Redis ‚Äî Broker Celery pour Airflow (ex√©cuteur distribu√©)
  # ================================================================================
  sport-redis:
    image: redis:7
    container_name: sport-redis
    ports:
      - "${REDIS_PORT}:6379"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - sport-network

  # ================================================================================
  # 7. ntfy ‚Äî Service de notifications simples (via CLI, API REST ou Webhook)
  #    - Notifications d‚Äôalertes ou messages techniques
  # ================================================================================
  sport-ntfy:
    image: binwiederhier/ntfy
    container_name: sport-ntfy
    command: serve
    ports:
      - "${NTFY_HTTP_PORT}:80"         # API REST et UI Web (http://localhost:<port>)
    restart: always
    networks:
      - sport-network

# ====================================================================================
# üîó R√©seau Docker partag√© entre tous les services
# ====================================================================================
networks:
  sport-network:
    name: sport-network
    driver: bridge

# ====================================================================================
# üíæ Volumes persistants (conservation des donn√©es et √©tats)
# ====================================================================================
volumes:
  postgres_data:
  minio_data:
  redpanda_data:
  spark_data:
