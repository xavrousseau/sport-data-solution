# ==========================================================================================
# Script      : 01_initialiser_minio.py
# Objectif    : Initialiser la structure MinIO + uploader les fichiers Excel de r√©f√©rence
# Auteur      : Xavier Rousseau | Revu par ChatGPT, Juillet 2025
# ==========================================================================================

import os
import sys
from pathlib import Path
from dotenv import load_dotenv
from loguru import logger
import boto3
from botocore.exceptions import ClientError

# ==========================================================================================
# 1. Chargement des variables d‚Äôenvironnement
# ==========================================================================================
load_dotenv(dotenv_path="/opt/airflow/.env", override=True)

MINIO_HOST = os.getenv("MINIO_HOST", "sport-minio")
MINIO_PORT = os.getenv("MINIO_PORT", "9000")
MINIO_ENDPOINT = f"http://{MINIO_HOST}:{MINIO_PORT}"
MINIO_ACCESS_KEY = os.getenv("MINIO_ROOT_USER", "minio")
MINIO_SECRET_KEY = os.getenv("MINIO_ROOT_PASSWORD", "minio123")
MINIO_BUCKET = os.getenv("MINIO_BUCKET_NAME", "sportdata")

DATA_DIR = Path("/opt/airflow/data/inputs")
EXTENSIONS = [".xlsx", ".xls"]

# Pr√©fixes MinIO (dossiers logiques du projet)
PREFIXES = [
    "referentiels/",                    # RH bruts (donnees_rh.xlsx)
    "simulation/",                      # Activit√©s simul√©es (Excel)
    "raw/",                             # Donn√©es nettoy√©es (RH / sport)
    "bronze/activites_sportives/",     # Donn√©es brutes depuis Kafka (Delta)
    "silver/activites_valides/",       # Donn√©es filtr√©es apr√®s contr√¥le qualit√©
    "final/",                           # R√©sultats finaux : primes, JBE
    "exports/",                         # Exports Excel (Power BI, erreurs)
    "validation_reports/"              # Rapports HTML Great Expectations
]

# ==========================================================================================
# 2. Configuration des logs
# ==========================================================================================
LOGS_PATH = Path("logs")
LOGS_PATH.mkdir(exist_ok=True)

logger.remove()
logger.add(sys.stdout, level="INFO")
logger.add(LOGS_PATH / "minio_initialisation_et_upload.log", level="INFO", rotation="1 MB")

# ==========================================================================================
# 3. Fonction principale (r√©utilisable dans Airflow ou CLI)
# ==========================================================================================
def initialiser_et_uploader():
    """
    Initialise la structure MinIO (bucket, dossiers, fichiers initiaux).
    Cr√©e les dossiers logiques avec .keep et upload les fichiers Excel d'entr√©e.
    """
    logger.info("üöÄ D√©but initialisation MinIO...")

    # Connexion MinIO via boto3
    try:
        s3 = boto3.client(
            "s3",
            endpoint_url=MINIO_ENDPOINT,
            aws_access_key_id=MINIO_ACCESS_KEY,
            aws_secret_access_key=MINIO_SECRET_KEY,
            region_name="us-east-1"
        )
        logger.success("‚úÖ Connexion √† MinIO r√©ussie.")
    except Exception as e:
        logger.error(f"‚ùå Connexion √©chou√©e : {e}")
        raise

    # Cr√©ation du bucket s'il n'existe pas
    try:
        s3.head_bucket(Bucket=MINIO_BUCKET)
        logger.info(f"üì¶ Bucket existant : {MINIO_BUCKET}")
    except ClientError as e:
        if e.response["Error"]["Code"] == "404":
            try:
                s3.create_bucket(Bucket=MINIO_BUCKET)
                logger.success(f"üì¶ Bucket cr√©√© : {MINIO_BUCKET}")
            except Exception as err:
                logger.error(f"‚ùå Cr√©ation bucket √©chou√©e : {err}")
                raise
        else:
            logger.error(f"‚ùå Erreur acc√®s bucket : {e}")
            raise

    # Cr√©ation des dossiers logiques avec fichier .keep
    for prefix in PREFIXES:
        key = prefix + ".keep"
        try:
            s3.put_object(Bucket=MINIO_BUCKET, Key=key, Body=b"")
            logger.success(f"üìÅ Pr√©fixe cr√©√© : {prefix}")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erreur cr√©ation pr√©fixe {prefix} : {e}")

    # Upload des fichiers Excel depuis /data/inputs vers referentiels/
    fichiers_excel = [f for f in DATA_DIR.glob("*") if f.suffix in EXTENSIONS and f.is_file()]
    if not fichiers_excel:
        logger.warning("‚ö†Ô∏è Aucun fichier Excel trouv√© dans /data/inputs.")
    else:
        for fichier in fichiers_excel:
            key = f"referentiels/{fichier.name}"
            try:
                s3.upload_file(str(fichier), MINIO_BUCKET, key)
                logger.success(f"üì§ Fichier upload√© : {fichier.name} ‚ûú {key}")
            except Exception as e:
                logger.error(f"‚ùå Upload √©chou√© pour {fichier.name} : {e}")

    logger.success("üéØ Structure MinIO pr√™te + fichiers Excel transf√©r√©s.")

# ==========================================================================================
# 4. Point d‚Äôentr√©e (CLI uniquement)
# ==========================================================================================
def main():
    initialiser_et_uploader()

if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        logger.error(f"‚ùå Erreur pipeline : {e}")
        sys.exit(1)
