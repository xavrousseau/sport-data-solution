# ======================================================================================
# Script      : etape_07_lancer_controle_qualite.py
# Objectif    : Lancer le job Spark de contr√¥le qualit√© sur Delta Lake (bronze)
#               - V√©rifie les donn√©es sportives
#               - G√©n√®re un rapport
#               - Peut √™tre int√©gr√© dans Airflow
# Auteur      : Xavier Rousseau | Juillet 2025
# ======================================================================================

import subprocess
import os
from dotenv import load_dotenv
from loguru import logger

# ======================================================================================
# 1. Chargement des variables d‚Äôenvironnement (.env global dans /opt/airflow/.env)
# ======================================================================================

load_dotenv(dotenv_path="/opt/airflow/.env", override=True)

SPARK_CONTAINER_NAME = os.getenv("SPARK_CONTAINER_NAME", "sport-spark")
SPARK_SCRIPT_CONTROLE_PATH = os.getenv("SPARK_SCRIPT_CONTROLE_PATH", "/opt/airflow/jobs/bronze_controle_qualite.py")

# ======================================================================================
# 2. Fonction principale appel√©e par Airflow ou manuellement
# ======================================================================================

def main(**kwargs):
    """
    Lancement du job Spark de contr√¥le qualit√© (Delta Lake).
    ‚Üí Ex√©cute le script Spark dans le conteneur via `docker exec` + `spark-submit`.
    ‚Üí Attend la fin du processus (bloquant).
    """
    logger.info("üöÄ Lancement du job Spark : contr√¥le qualit√© sur donn√©es Delta Lake")

    # Commande Docker √† ex√©cuter : spark-submit dans le conteneur Spark
    cmd = [
        "docker", "exec", "-i", SPARK_CONTAINER_NAME,
        "spark-submit", SPARK_SCRIPT_CONTROLE_PATH
    ]

    try:
        logger.debug(f"üõ†Ô∏è Commande ex√©cut√©e : {' '.join(cmd)}")
        subprocess.run(cmd, check=True)  # bloquant, attend la fin
        logger.success("‚úÖ Job Spark de contr√¥le qualit√© termin√© avec succ√®s.")
    except subprocess.CalledProcessError as e:
        logger.error(f"‚ùå √âchec du job Spark : {e}")
        raise

# ======================================================================================
# 3. Ex√©cution locale (debug / test manuel)
# ======================================================================================

if __name__ == "__main__":
    main()
