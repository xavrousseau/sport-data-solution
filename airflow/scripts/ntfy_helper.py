# ==========================================================================================
# ntfy_helper.py ‚Äî Notifications NTFY (robustes) + ressources "humaines"
# Compat ascendante avec etape_03 / etape_08 / etape_09
#
# Contenu :
#   1) Chargement ENV + logging hygi√©nique (pas de secrets)
#   2) Session HTTP avec retries (429/5xx), timeouts
#   3) Constantes "storytelling" (LIEUX_POPULAIRES, ACTIVITES, COMMENTAIRES_REALISTES, EMOJIS_SPORTIFS)
#   4) S√©lection de lieux COH√âRENTS par sport (catalogue typ√© + tagging auto)
#   5) Aides de formatage (emoji, commentaire_coherent)
#   6) Fonctions publiques d'envoi NTFY :
#        - envoyer_message_texte(message, topic=None)
#        - envoyer_resume_pipeline(df_primes, df_bien_etre, url_rapport, topic="avantages_sportifs")
#        - envoyer_message_erreur(topic, message)
# ==========================================================================================

from __future__ import annotations

import os
import time
import hashlib
import unicodedata
import random
from typing import Iterable, Dict, Set

import requests
from requests.adapters import HTTPAdapter
from urllib3.util.retry import Retry

from dotenv import load_dotenv
from loguru import logger

# ------------------------------------------------------------------------------------------
# 1) ENV & LOGGING ‚Äî charger .env (Airflow puis local) et √©viter les fuites de secrets
# ------------------------------------------------------------------------------------------

try:
    load_dotenv("/opt/airflow/.env", override=True)
except Exception:
    # Ex√©cutions locales : ce chemin n'existe pas forc√©ment ‚Üí c'est OK.
    pass
load_dotenv(".env", override=True)

NTFY_URL: str = os.getenv("NTFY_URL", "http://localhost:8080").rstrip("/")
NTFY_TOPIC: str = os.getenv("NTFY_TOPIC", "sportdata_activites")
NTFY_USE_EMOJIS: bool = os.getenv("NTFY_USE_EMOJIS", "true").lower() in {"1", "true", "yes", "on"}

# Filtrage basique des logs pour ne pas faire fuiter de secrets accidentellement.
_SENSITIVE = ("PASSWORD", "SECRET", "TOKEN", "KEY", "ACCESS")

def _no_secret(record) -> bool:
    return not any(tok in str(record["message"]).upper() for tok in _SENSITIVE)

logger.remove()
logger.add(lambda m: print(m, end=""), level="INFO", filter=_no_secret)

# ------------------------------------------------------------------------------------------
# 2) HTTP robuste ‚Äî session requests avec retries + timeouts
# ------------------------------------------------------------------------------------------

# Timeouts (connect, read) raisonnables pour un service interne/close-by.
_DEF_TIMEOUT = (3, 10)

def _session() -> requests.Session:
    """
    Construit une session HTTP r√©siliente :
      - retries automatiques sur 429/5xx (avec backoff),
      - respect du header Retry-After,
      - mont√©e sur http/https.
    """
    s = requests.Session()
    r = Retry(
        total=3,
        backoff_factor=0.8,
        status_forcelist=(429, 500, 502, 503, 504),
        allowed_methods=frozenset(["GET", "POST"]),
        raise_on_status=False,
        respect_retry_after_header=True,
    )
    a = HTTPAdapter(max_retries=r)
    s.mount("http://", a)
    s.mount("https://", a)
    return s

_SES = _session()

def _post_ntfy(url: str, data: bytes) -> None:
    """
    POST simple vers NTFY avec gestion d'erreurs.
    On garde la signature minimale (texte brut), sans headers exotiques.
    """
    try:
        resp = _SES.post(url, data=data, timeout=_DEF_TIMEOUT)
        if resp.status_code >= 400:
            logger.error(f"[NTFY] HTTP {resp.status_code} ‚Äî {resp.text[:200]}")
    except Exception as e:
        logger.error(f"[NTFY] POST failed: {e!r}")

# ------------------------------------------------------------------------------------------
# 3) Constantes "humaines" ‚Äî storytelling utilis√© par etape_03/08
#     (Conserv√©es √† l'identique pour compatibilit√©)
# ------------------------------------------------------------------------------------------

LIEUX_POPULAIRES = [
    "au parc du Thabor","au bord de la mer","dans le bois de Boulogne","sur les quais",
    "au bord du canal Saint-Martin","autour du lac de Ty Colt","au parc Bor√©ly","au parc de Proc√©",
    "dans la vall√©e de Chevreuse","dans les Monts d‚ÄôArr√©e","√† la Plaine des Sports",
    "autour de l‚Äô√©tang de Cora","pr√®s du stade","au parc de la T√™te d‚ÄôOr",
    "sur la Corniche","le long de la Loire","au parc de Bercy","au parc des Buttes-Chaumont",
    "au bois de Vincennes","le long du canal de l‚ÄôOurcq","au parc de la De√ªle",
    "au parc de la Villette","dans la for√™t de Meudon","√† la plage de la Baule",
    "au Mont Saint-Michel","√† l‚Äô√Æle de R√©","le long de l‚ÄôErdre","au parc de Miribel-Jonage",
    "au parc Montsouris","dans la for√™t de Rambouillet","autour du lac d‚ÄôAnnecy","au parc naturel du Vercors",
    "dans les Calanques","au parc du Confluent","dans le massif de l‚ÄôAigoual",
    "sur les bords du Lez","dans la for√™t du Rouvray","au parc de la Citadelle",
    "au parc de la T√™te d'Or","dans la for√™t de Fontainebleau","au canal du Midi",
    "vers Saint-Guilhem","sur les berges de la Garonne","au parc de la Penfeld",
    "le long du Lez","au parc du Thabor","pr√®s du pont de Rohan"
]

ACTIVITES = [
    "Course √† pied","Marche","V√©lo","Trottinette","Roller","Skateboard","Randonn√©e","Natation","Escalade",
    "Fitness","Musculation","Boxe","Tennis","Basketball","Football","Badminton","Yoga","Pilates","Danse",
    "Karat√©","Judo","Handball","Rugby","Ping-pong","Padel","Squash","CrossFit","Ski alpin","Ski de fond",
    "Snowboard","Aviron","Cano√´-kayak","Surf","Kitesurf","Plong√©e","Stand-up paddle","Marche nordique",
    "Parkour","Gymnastique","Trampoline"
]

COMMENTAIRES_REALISTES = [
    "Reprise en douceur apr√®s une pause.","Tr√®s bonne s√©ance aujourd'hui !","C'√©tait dur mais je ne regrette pas.",
    "J'ai battu mon record perso !","Belle sortie dans la nature.","Bonne ambiance, bon rythme.",
    "Temps id√©al pour ce sport.","Encore un effort avant le week-end !","Avec quelques coll√®gues du bureau.",
    "Motiv√©(e) comme jamais aujourd‚Äôhui !","Petite s√©ance rapide entre midi et deux.","Pas facile, mais √ßa fait du bien.",
    "Objectif atteint pour aujourd‚Äôhui.","J‚Äôai test√© un nouveau parcours.","De belles sensations malgr√© le vent.",
    "Un peu fatigu√©(e), mais satisfait(e).","Toujours un plaisir de bouger.","Je progresse petit √† petit.",
    "Une sortie plus longue que pr√©vu.","√áa m‚Äôa vid√© la t√™te !","Retour progressif apr√®s blessure.",
]

EMOJIS_SPORTIFS = ["üí™","üî•","üåü","üèÉ‚Äç‚ôÇÔ∏è","üö¥‚Äç‚ôÄÔ∏è","üèûÔ∏è","üòÖ","üôå","‚õ∞Ô∏è","üéØ"]

def _emoji() -> str:
    """Retourne un emoji sportif si activ√©, sinon cha√Æne vide (pour commentaires)."""
    return random.choice(EMOJIS_SPORTIFS) if (NTFY_USE_EMOJIS and EMOJIS_SPORTIFS) else ""

# ------------------------------------------------------------------------------------------
# 4) Coh√©rence sport ‚Üî lieu
#    Id√©e : on "tague" un catalogue de lieux (mer/lac/for√™t/urbain/...) et
#           on s√©lectionne un lieu compatible avec le sport demand√©.
#           -> z√©ro "surf au parc du Thabor".
# ------------------------------------------------------------------------------------------

def _slug(s: str) -> str:
    """Normalise une cha√Æne en minuscules ASCII (utile pour matcher des mots-cl√©s)."""
    s = unicodedata.normalize("NFD", s)
    s = "".join(ch for ch in s if unicodedata.category(ch) != "Mn")
    return s.lower()

# --- 4.1) Mini-catalogue typ√© (quelques lieux "embl√©matiques") --------------
LIEUX_CATALOGUE = [
    {"nom": "sur la c√¥te atlantique",      "tags": {"mer","vent"}},
    {"nom": "dans les Calanques",          "tags": {"mer","falaise"}},
    {"nom": "au lac d‚ÄôAnnecy",             "tags": {"lac","montagne"}},
    {"nom": "au lac du Bourget",           "tags": {"lac"}},
    {"nom": "le long de la Loire",         "tags": {"rivi√®re","plaine"}},
    {"nom": "au canal du Midi",            "tags": {"canal","plat"}},
    {"nom": "dans la vall√©e de Chevreuse", "tags": {"for√™t","vallonn√©"}},
    {"nom": "au bois de Vincennes",        "tags": {"for√™t","urbain"}},
    {"nom": "au parc de la T√™te d‚ÄôOr",     "tags": {"parc","urbain"}},
    {"nom": "dans le Vercors",             "tags": {"montagne"}},
    {"nom": "sur les quais",               "tags": {"urbain","plat"}},
    {"nom": "dans la for√™t de Rambouillet","tags": {"for√™t"}},
]

# --- 4.2) Tagging automatique de tes LIEUX_POPULAIRES existants -------------
#      On d√©tecte des mots-cl√©s ("lac", "canal", "plage", ...) pour enrichir en tags.
_TAGS_PAR_MOTCLE: Dict[str, Set[str]] = {
    "mer": {"mer"}, "plage": {"mer"},
    "calanque": {"mer","falaise"},
    "lac": {"lac"}, "√©tang": {"lac"}, "etang": {"lac"},
    "canal": {"canal","plat"}, "quais": {"canal","urbain","plat"},
    "bois": {"for√™t"}, "for√™t": {"for√™t"}, "foret": {"for√™t"},
    "parc": {"parc","urbain"}, "stade": {"urbain"},
    "mont ": {"montagne"}, "massif": {"montagne"}, "vercors": {"montagne"},
    "vall√©e": {"vallonn√©"}, "vallee": {"vallonn√©"},
    "corniche": {"mer","falaise"},
    "loire": {"rivi√®re","plaine"},
    "garonne": {"rivi√®re","plaine"},
    "lez": {"rivi√®re","plaine"},
    "erdre": {"rivi√®re","plaine"},
    "ourcq": {"canal","plat"},
    "rambouillet": {"for√™t"},
    "fontainebleau": {"for√™t"},
    "miribel": {"parc","lac"},
    "t√™te d‚Äôor": {"parc","urbain"}, "tete d'or": {"parc","urbain"},
    "vincennes": {"for√™t","urbain"},
}

def _tags_depuis_phrase_lieu(phrase: str) -> Set[str]:
    """Inf√®re un ensemble de tags √† partir du libell√© d'un lieu."""
    tags: Set[str] = set()
    sl = _slug(phrase)
    for motcle, t in _TAGS_PAR_MOTCLE.items():
        if motcle in sl:
            tags |= t
    # Gardes-fous : si rien trouv√©, on essaie des interpr√©tations neutres plausibles
    if not tags:
        if "parc" in sl:
            tags |= {"parc", "urbain"}
        if "quai" in sl:
            tags |= {"urbain", "plat"}
    return tags

_LIEUX_DERIVES = [{"nom": nom, "tags": _tags_depuis_phrase_lieu(nom)} for nom in LIEUX_POPULAIRES]

# On fusionne le mini-catalogue typ√© + tes lieux tagu√©s automatiquement
_LIEUX_UNIFIES = [*LIEUX_CATALOGUE, *_LIEUX_DERIVES]

# --- 4.3) Terrains admissibles par sport ------------------------------------
SPORT_TERRAINS: Dict[str, Set[str]] = {
    "Surf": {"mer"},
    "Kitesurf": {"mer"},
    "Natation": {"mer","lac","rivi√®re","canal","piscine"},
    "Aviron": {"lac","rivi√®re","canal"},
    "Cano√´-kayak": {"lac","rivi√®re","canal"},
    "V√©lo": {"urbain","for√™t","plat","vallonn√©","montagne","campagne","canal"},
    "Course √† pied": {"urbain","parc","for√™t","montagne","plaine","canal"},
    "Randonn√©e": {"for√™t","montagne","plaine"},
    "Escalade": {"falaise","montagne"},
    "Roller": {"urbain","plat"},
    "Trottinette": {"urbain","plat"},
    "Marche": {"urbain","parc","for√™t"},
    "Fitness": {"urbain","int√©rieur"},
    "Yoga": {"urbain","int√©rieur","parc"},
}

# --- 4.4) Bonus saisonnier l√©ger (mois ‚Üí bonus) -----------------------------
#      Objectif : privil√©gier "un peu plus" natation/surf l'√©t√©, rando au printemps/√©t√©‚Ä¶
SAISON_BONUS: Dict[str, Dict[int, float]] = {
    "Natation": {6:0.4,7:0.6,8:0.6,5:0.2,9:0.2},
    "Surf":     {6:0.2,7:0.3,8:0.3},
    "V√©lo":     {4:0.2,5:0.3,6:0.3,7:0.3,8:0.3,9:0.2},
    "Randonn√©e":{4:0.2,5:0.3,6:0.3,7:0.3,8:0.3,9:0.3,10:0.2},
}

def _hashpick(items: Iterable[dict], key: str) -> dict | None:
    """
    S√©lection d√©terministe dans une liste (stabilit√© visuelle batch‚Üíbatch).
    Utilise SHA-256(key) % len(items).
    """
    items = list(items)
    if not items:
        return None
    h = int(hashlib.sha256(key.encode("utf-8")).hexdigest(), 16)
    return items[h % len(items)]

def choisir_lieu_pour_sport(sport: str, mois: int | None = None, seed_key: str = "") -> str:
    """
    Retourne un lieu COH√âRENT avec le 'sport' pass√© :
      1) filtre par tags compatibles (SPORT_TERRAINS),
      2) re-shuffle d√©terministe si le sport est "de saison" pour 'mois',
      3) choix d√©terministe via 'seed_key' (ex: "prenom|sport|jour").
    Si aucun candidat sp√©cifique : fallback vers des lieux neutres (parc/urbain).
    """
    sport_c = sport.strip().capitalize()
    terrains = SPORT_TERRAINS.get(sport_c, {"urbain", "parc"})

    # Filtre par intersection de tags
    cands = [L for L in _LIEUX_UNIFIES if (L["tags"] & terrains)]

    # Fallback neutre si rien trouv√©
    if not cands:
        cands = [L for L in _LIEUX_UNIFIES if (L["tags"] & {"parc", "urbain"})] or _LIEUX_UNIFIES

    # L√©g√®re influence saisonni√®re : on re-shuffle de fa√ßon D√âTERMINISTE (pas de hasard instable)
    if mois is not None:
        bonus = SAISON_BONUS.get(sport_c, {}).get(mois, 0.0)
        if bonus > 0 and len(cands) > 1:
            rnd = random.Random(int(hashlib.md5(f"{sport_c}-{mois}".encode()).hexdigest(), 16))
            rnd.shuffle(cands)

    key = seed_key or f"{sport_c}|{mois or 0}"
    picked = _hashpick(cands, key)
    return picked["nom"] if picked else ""

def commentaire_coherent(prenom: str, sport: str, mois: int, extra_emoji: bool = True) -> str:
    """
    Produit une phrase courte et "propre" :
      - sport ‚Üí lieu compatible (jamais "surf au Thabor"),
      - "en v√©lo" corrig√© en "√† v√©lo",
      - emoji optionnel (g√©r√© par NTFY_USE_EMOJIS).
    """
    lieu = choisir_lieu_pour_sport(sport, mois, seed_key=f"{prenom}|{sport}|{mois}")
    emj = f" {_emoji()}" if extra_emoji else ""
    sport_lc = sport.strip().lower()
    sport_txt = "√† v√©lo" if sport_lc == "v√©lo" else f"en {sport_lc}"
    # ex: "Jules s‚Äôest donn√©(e) √† fond √† v√©lo dans la vall√©e de Chevreuse üí™"
    return f"{prenom} s‚Äôest donn√©(e) √† fond {sport_txt} {lieu}{emj}".strip()

# ------------------------------------------------------------------------------------------
# 5) API publique ‚Äî fonctions d'envoi NTFY (compatibles avec tes jobs)
# ------------------------------------------------------------------------------------------

def envoyer_message_texte(message: str, topic: str | None = None) -> None:
    """
    Envoie un message TEXTE brut sur NTFY.
    Utilis√© par : etape_08 (notifications d'ingestion), et d'autres scripts √©ventuels.
    """
    try:
        _post_ntfy(f"{NTFY_URL}/{(topic or NTFY_TOPIC)}", message.encode("utf-8"))
        logger.info("üîî Notification envoy√©e.")
    except Exception as e:
        logger.error(f"Impossible d‚Äôenvoyer la notification : {e}")

def envoyer_resume_pipeline(df_primes, df_bien_etre, url_rapport, topic: str = "avantages_sportifs") -> None:
    """
    R√©sum√© concis d'un pipeline (ex: √©tape 09) :
      - nb de primes et nb de JBE,
      - pointeur/lien de rapport,
      - pas de d√©tail ligne-√†-ligne (les jobs g√®rent d√©j√† l'√©chantillonnage).
    """
    try:
        msg = (
            "üéØ Pipeline termin√© !\n"
            f"üí∂ {len(df_primes)} primes sportives\n"
            f"üßò {len(df_bien_etre)} journ√©es bien-√™tre\n"
            f"üîé Rapport: {url_rapport}"
        )
        _post_ntfy(f"{NTFY_URL}/{topic}", msg.encode("utf-8"))
        logger.info("üîî R√©sum√© pipeline envoy√©.")
    except Exception as e:
        logger.warning(f"R√©sum√© pipeline KO: {e}")

def envoyer_message_erreur(topic: str | None, message: str) -> None:
    """
    Envoie un message d'erreur/alerte sur NTFY.
    """
    try:
        _post_ntfy(f"{NTFY_URL}/{(topic or NTFY_TOPIC)}", message.encode("utf-8"))
        logger.warning("‚ö†Ô∏è Notification d‚Äôerreur envoy√©e.")
    except Exception as e:
        logger.error(f"Impossible d‚Äôenvoyer l‚Äôerreur : {e}")

# ------------------------------------------------------------------------------------------
# 6) Export "propre" ‚Äî ce que ce module expose explicitement
# ------------------------------------------------------------------------------------------

__all__ = [
    # Constantes storytelling
    "LIEUX_POPULAIRES", "ACTIVITES", "COMMENTAIRES_REALISTES", "EMOJIS_SPORTIFS",
    # S√©lecteurs coh√©rents
    "choisir_lieu_pour_sport", "commentaire_coherent",
    # Envoi NTFY
    "envoyer_message_texte", "envoyer_resume_pipeline", "envoyer_message_erreur",
    # R√©glages
    "NTFY_URL", "NTFY_TOPIC", "NTFY_USE_EMOJIS",
]
