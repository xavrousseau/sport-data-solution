# ==========================================================================================
# Script       : ntfy_helper.py
# Objectif     : Centraliser toutes les fonctions de notification via NTFY
# Utilis√© par  : Scripts Python (simulation) + Jobs Spark (streaming + qualit√©)
# Auteur       : Xavier Rousseau | Modifi√© par ChatGPT, juillet 2025
# ==========================================================================================

import os
import requests
from random import choice
from dotenv import load_dotenv
from loguru import logger
from datetime import datetime
import time 

# ==========================================================================================
# 1. Chargement des variables d‚Äôenvironnement (.env)
# ==========================================================================================

load_dotenv(dotenv_path=".env", override=True)

NTFY_URL = os.getenv("NTFY_URL", "http://localhost:8080")
NTFY_TOPIC = os.getenv("NTFY_TOPIC", "sportdata_activites")

# ==========================================================================================
# 2. Donn√©es statiques pour enrichir les messages
# ==========================================================================================

ACTIVITES = [
    "Course √† pied", "Marche", "V√©lo", "Trottinette", "Roller", "Skateboard",
    "Randonn√©e", "Natation", "Escalade", "Fitness", "Musculation",
    "Boxe", "Tennis", "Basketball", "Football", "Badminton",
    "Yoga", "Pilates", "Danse", "Karat√©", "Judo"
]

COMMENTAIRES_REALISTES = [
    "Reprise en douceur apr√®s une pause.",
    "Tr√®s bonne s√©ance aujourd'hui ! üí™",
    "C'√©tait dur mais je ne regrette pas.",
    "J'ai battu mon record perso !",
    "Belle sortie dans la nature.",
    "Bonne ambiance, bon rythme.",
    "Temps id√©al pour ce sport.",
    "Encore un effort avant le week-end !",
    "Avec quelques coll√®gues du bureau.",
    "Motiv√©(e) comme jamais aujourd‚Äôhui !",
    "Petite s√©ance rapide entre midi et deux.",
    "Pas facile, mais √ßa fait du bien.",
    "Objectif atteint pour aujourd‚Äôhui.",
    "J‚Äôai test√© un nouveau parcours.",
    "De belles sensations malgr√© le vent.",
    "Un peu fatigu√©(e), mais satisfait(e).",
    "Toujours un plaisir de bouger.",
    "Je progresse petit √† petit.",
    "Une sortie plus longue que pr√©vu.",
    "√áa m‚Äôa vid√© la t√™te !",
    "Retour progressif apr√®s blessure.",
    "Session matinale pour bien d√©marrer.",
    "Bonne s√©ance cardio aujourd‚Äôhui.",
    "J‚Äôai bien transpir√© üòÖ",
    "Toujours motiv√©(e) m√™me sous la pluie.",
    "Rien de mieux qu‚Äôun peu de sport pour d√©compresser.",
    "Sortie d√©couverte dans un nouveau coin.",
    "Avec de la musique dans les oreilles, c‚Äôest encore mieux üéß",
    "Un peu raide aujourd‚Äôhui, mais content(e) d‚Äôavoir boug√©.",
    "Beaucoup de monde dehors, mais bonne ambiance.",
    "Une belle mont√©e, j‚Äôai souffert mais je suis fier(e)."
]

LIEUX_POPULAIRES = [
    "au parc du Thabor", "le long du canal d‚ÄôIlle-et-Rance", "sur les quais de Bordeaux",
    "au bord du lac d‚ÄôAnnecy", "dans les bois de Vincennes", "au parc de la T√™te d'Or",
    "au bord du Lez", "√† la plage du Prado", "dans la for√™t de Fontainebleau",
    "au canal du Midi", "vers Saint-Guilhem", "sur les berges de la Garonne",
    "au parc de la Penfeld", "le long du Lez", "au parc du Thabor",
    "pr√®s du pont de Rohan"
]

EMOJIS_SPORTIFS = ["üí™", "üî•", "üåü", "üèÉ‚Äç‚ôÇÔ∏è", "üö¥‚Äç‚ôÄÔ∏è", "üèûÔ∏è", "üòÖ", "üôå", "‚õ∞Ô∏è", "üéØ"]

# ==========================================================================================
# 3. Fonction principale : envoyer un message enrichi (activit√© sportive)
# ==========================================================================================

def envoyer_message_ntfy(prenom, sport, km, minutes):
    """
    Envoie une notification enrichie pour une activit√© sportive via ntfy.

    Args:
        prenom (str): Pr√©nom du salari√©
        sport (str): Type d‚Äôactivit√© (ex. V√©lo)
        km (float): Distance parcourue (en km)
        minutes (int): Temps pass√© (en minutes)
    """
    lieu = choice(LIEUX_POPULAIRES)
    emoji = choice(EMOJIS_SPORTIFS)
    commentaires = [
        f"{emoji} Bravo {prenom} ! Tu viens de faire {km:.1f} km de {sport.lower()} en {minutes} min {lieu}",
        f"{emoji} {prenom} a bien transpir√© : {km:.1f} km en {minutes} minutes {lieu}",
        f"{emoji} {prenom} s‚Äôest donn√© √† fond en {sport.lower()} {lieu} ({minutes} min)",
        f"{emoji} Belle performance de {prenom} : {km:.1f} km parcourus en {minutes} minutes !",
        f"{emoji} {prenom} garde la forme avec une session de {sport.lower()} de {km:.1f} km {lieu} üèûÔ∏è",
        f"{emoji} {prenom} vient de boucler {km:.1f} km en {sport.lower()} {lieu}, chapeau üé©",
        f"{emoji} {prenom} encha√Æne les d√©fis : {minutes} min de {sport.lower()} pour {km:.1f} km !",
        f"{emoji} {prenom} ne l√¢che rien : {km:.1f} km de {sport.lower()} sous le soleil ‚òÄÔ∏è",
        f"{emoji} {prenom} a bien m√©rit√© une pause apr√®s {minutes} min de {sport.lower()} {lieu}",
        f"{emoji} Excellente session de {sport.lower()} pour {prenom} : {km:.1f} km parcourus üí•"
    ]
    message = choice(commentaires)
    try:
        requests.post(f"{NTFY_URL}/{NTFY_TOPIC}", data=message.encode("utf-8"))
        logger.info(f"üîî Notification envoy√©e : {message}")
    except Exception as e:
        logger.error(f"‚ùå Erreur NTFY : {e}")

# ==========================================================================================
# 4. Fonction d√©di√©e au contr√¥le qualit√© (succ√®s / √©chec)
# ==========================================================================================

def notifier_qualite(nb_valides: int, nb_erreurs: int):
    """
    Envoie une notification simple sur l'√©tat du contr√¥le qualit√© (job Spark).

    Args:
        nb_valides (int): Nombre de lignes valides
        nb_erreurs (int): Nombre de lignes en erreur
    """
    try:
        if nb_erreurs > 0:
            message = f"‚ùå Contr√¥le qualit√© : {nb_erreurs} erreur(s) d√©tect√©e(s)."
        else:
            message = f"‚úÖ Contr√¥le qualit√© OK : {nb_valides} lignes valides."

        requests.post(f"{NTFY_URL}/{NTFY_TOPIC}", data=message.encode("utf-8"))
        logger.info(f"üîî Notification ntfy envoy√©e : {message}")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è Erreur lors de l‚Äôenvoi ntfy : {e}")

# ==========================================================================================
# 5. Notification d√©taill√©e de fin de pipeline (primes + bien-√™tre)
# ==========================================================================================

def envoyer_resume_pipeline(df_primes, df_bien_etre, url_rapport, topic="avantages_sportifs"):
    """
    Envoie un r√©sum√© structur√© des avantages RH via ntfy.
    """
    try:
        message_resume = (
            f"üéØ Pipeline termin√© avec succ√®s !\n"
            f"üí∂ {len(df_primes)} primes sportives attribu√©es\n"
            f"üßò {len(df_bien_etre)} journ√©es bien-√™tre accord√©es\n"
            f"üìÅ Donn√©es dans MinIO + PostgreSQL\n"
            f"üîç Rapport GE : {url_rapport}"
        )
        requests.post(f"{NTFY_URL.rstrip('/')}/{topic}", data=message_resume.encode("utf-8"))
        logger.success("üîî Notification ntfy (r√©sum√© global) envoy√©e.")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è Erreur ntfy (r√©sum√© global) : {e}")
    time.sleep(1)

    try:
        df_resume = df_primes[["id_salarie", "nom", "prenom", "prime_montant_eur", "nb_activites"]].merge(
            df_bien_etre[["id_salarie", "nb_journees_bien_etre"]],
            on="id_salarie", how="outer"
        ).fillna({"prime_montant_eur": 0, "nb_journees_bien_etre": 0, "nb_activites": 0})

        lignes = []
        for _, row in df_resume.iterrows():
            if row["prime_montant_eur"] > 0 or row["nb_journees_bien_etre"] > 0:
                avantages = []
                if row["prime_montant_eur"] > 0:
                    avantages.append(f"üí∂ Prime ({int(row['prime_montant_eur'])} ‚Ç¨) ‚Äî {int(row['nb_activites'])} activit√©(s)")
                if row["nb_journees_bien_etre"] > 0:
                    avantages.append(f"üßò {int(row['nb_journees_bien_etre'])} JBE")
                lignes.append(f"- {row['prenom']} {row['nom']} : " + " | ".join(avantages))

        for i in range(0, len(lignes), 10):
            bloc = "\n".join(lignes[i:i+10])
            message = f"üìå B√©n√©ficiaires ({i+1} √† {min(i+10, len(lignes))}) :\n{bloc}"
            requests.post(f"{NTFY_URL.rstrip('/')}/{topic}", data=message.encode("utf-8"))
            time.sleep(1)
        logger.success("üîî Notifications ntfy (d√©tail b√©n√©ficiaires) envoy√©es.")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è Erreur ntfy (b√©n√©ficiaires) : {e}")

# ==========================================================================================
# 6. Notification d‚Äôerreur en cas de crash pipeline
# ==========================================================================================

def envoyer_message_erreur(topic, message):
    """
    Envoie un message d‚Äôerreur format√© √† ntfy.
    """
    try:
        requests.post(f"{NTFY_URL.rstrip('/')}/{topic}", data=message.encode("utf-8"))
        logger.warning(f"‚ö†Ô∏è Notification ntfy d‚Äô√©chec envoy√©e sur topic {topic}")
    except Exception as e:
        logger.error(f"‚ùå Impossible d‚Äôenvoyer la notification d‚Äôerreur : {e}")
