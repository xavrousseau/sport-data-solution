# ==========================================================================================
# Script      : etape_01_initialiser_minio.py
# Objectif    : Initialiser la structure MinIO + uploader les fichiers Excel de r√©f√©rence
# Auteur      : Xavier Rousseau | Juillet 2025
# ==========================================================================================

import os
import sys
from pathlib import Path
from dotenv import load_dotenv
from loguru import logger
import boto3
from botocore.exceptions import ClientError

# ==========================================================================================
# 1. Chargement des variables d‚Äôenvironnement (.env global utilis√© dans toute la stack)
# ==========================================================================================

load_dotenv(dotenv_path="/opt/airflow/.env", override=True)

MINIO_HOST = os.getenv("MINIO_HOST", "sport-minio")
MINIO_PORT = os.getenv("MINIO_PORT", "9000")
MINIO_ENDPOINT = f"http://{MINIO_HOST}:{MINIO_PORT}"
MINIO_ACCESS_KEY = os.getenv("MINIO_ROOT_USER", "minio")
MINIO_SECRET_KEY = os.getenv("MINIO_ROOT_PASSWORD", "minio123")
MINIO_BUCKET = os.getenv("MINIO_BUCKET_NAME", "sportdata")

# R√©pertoire contenant les fichiers Excel de r√©f√©rence
DATA_DIR = Path("/opt/airflow/data/inputs")
EXTENSIONS = [".xlsx", ".xls"]

# Dossiers logiques √† cr√©er dans MinIO (pr√©fixes S3)
PREFIXES = [
    "inputs/",        # fichiers Excel initiaux (RH + sport)
    "clean/",         # Donn√©es nettoy√©es pr√™tes √† l‚Äôusage
    "bronze/",        # Flux brut (Kafka ‚Üí Delta)
    "silver/",        # Apr√®s contr√¥le qualit√©
    "gold/",          # R√©sultats finaux (primes, JBE, agr√©gats)
    "exports/",       # Fichiers Excel pour Power BI, audits, etc.
    "validation/"     # Rapports Great Expectations
]

# ==========================================================================================
# 2. Configuration des logs
# ==========================================================================================

LOGS_PATH = Path("/opt/airflow/logs")
LOGS_PATH.mkdir(parents=True, exist_ok=True)

logger.remove()
logger.add(sys.stdout, level="INFO")  # Console
logger.add(LOGS_PATH / "minio_initialisation_et_upload.log", level="INFO", rotation="1 MB")  # Fichier

# ==========================================================================================
# 3. Fonction principale : Initialisation + Upload
# ==========================================================================================

def initialiser_et_uploader():
    """
    Initialise la structure MinIO :
    - Cr√©e le bucket s‚Äôil n‚Äôexiste pas
    - Cr√©e les dossiers logiques avec un fichier .keep
    - Upload les fichiers Excel initiaux dans `inputs/`
    """
    logger.info("üöÄ D√©but de l'initialisation MinIO...")

    # --- Connexion √† MinIO avec boto3 ---
    try:
        s3 = boto3.client(
            "s3",
            endpoint_url=MINIO_ENDPOINT,
            aws_access_key_id=MINIO_ACCESS_KEY,
            aws_secret_access_key=MINIO_SECRET_KEY,
            region_name="us-east-1"  # obligatoire m√™me si non utilis√©
        )
        logger.success("‚úÖ Connexion √† MinIO r√©ussie.")
    except Exception as e:
        logger.error(f"‚ùå Connexion √©chou√©e : {e}")
        raise

    # --- Cr√©ation du bucket s‚Äôil n‚Äôexiste pas ---
    try:
        s3.head_bucket(Bucket=MINIO_BUCKET)
        logger.info(f"üì¶ Bucket d√©j√† pr√©sent : {MINIO_BUCKET}")
    except ClientError as e:
        if e.response["Error"]["Code"] == "404":
            try:
                s3.create_bucket(Bucket=MINIO_BUCKET)
                logger.success(f"üì¶ Bucket cr√©√© : {MINIO_BUCKET}")
            except Exception as err:
                logger.error(f"‚ùå Cr√©ation √©chou√©e : {err}")
                raise
        else:
            logger.error(f"‚ùå Erreur acc√®s bucket : {e}")
            raise

    # --- Cr√©ation des dossiers logiques avec un .keep ---
    for prefix in PREFIXES:
        key = prefix + ".keep"
        try:
            s3.put_object(Bucket=MINIO_BUCKET, Key=key, Body=b"")
            logger.success(f"üìÅ Dossier logique cr√©√© : {prefix}")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erreur cr√©ation dossier {prefix} : {e}")

    # --- Upload des fichiers Excel de r√©f√©rence dans "inputs/" ---
    fichiers_excel = [f for f in DATA_DIR.glob("*") if f.suffix in EXTENSIONS and f.is_file()]
    if not fichiers_excel:
        logger.warning("‚ö†Ô∏è Aucun fichier Excel trouv√© dans /data/inputs.")
    else:
        for fichier in fichiers_excel:
            key = f"inputs/{fichier.name}"
            try:
                s3.upload_file(str(fichier), MINIO_BUCKET, key)
                logger.success(f"üì§ Fichier upload√© : {fichier.name} ‚ûú {key}")
            except Exception as e:
                logger.error(f"‚ùå Upload √©chou√© pour {fichier.name} : {e}")

    logger.success("üéØ Initialisation MinIO termin√©e avec succ√®s.")

# ==========================================================================================
# 4. Point d‚Äôentr√©e CLI
# ==========================================================================================

def main():
    initialiser_et_uploader()

if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        logger.error(f"‚ùå Erreur inattendue : {e}")
        sys.exit(1)
